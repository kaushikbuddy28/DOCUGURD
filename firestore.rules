rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile.
     * @allow (get) User with UID 'user123' can read their profile.
     * @allow (update) User with UID 'user123' can update their profile.
     * @allow (delete) User with UID 'user123' can delete their profile.
     * @deny (create) User with UID 'user456' cannot create a profile with ID 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces user-ownership for documents.
     * @path /users/{userId}/documents/{documentId}
     * @allow (create) User with UID 'user123' can create a document under their profile.
     * @allow (get) User with UID 'user123' can read a document under their profile.
     * @allow (update) User with UID 'user123' can update a document under their profile.
     * @allow (delete) User with UID 'user123' can delete a document under their profile.
     * @deny (create) User with UID 'user456' cannot create a document under user123's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/documents/{documentId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces user-ownership for analysis results.
     * @path /users/{userId}/documents/{documentId}/analysis_results/{analysisResultId}
     * @allow (create) User with UID 'user123' can create an analysis result under their document.
     * @allow (get) User with UID 'user123' can read an analysis result under their document.
     * @allow (update) User with UID 'user123' can update an analysis result under their document.
     * @allow (delete) User with UID 'user123' can delete an analysis result under their document.
     * @deny (create) User with UID 'user456' cannot create an analysis result under user123's document.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/documents/{documentId}/analysis_results/{analysisResultId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Restricts access to admin credentials.
     * @path /admins/{adminId}
     * @allow None yet - requires further role-based implementation.
     * @deny All access until admin role implementation.
     * @principle Requires admin role for any operations.
     */
    match /admins/{adminId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to website information.
     * @path /website_info/{websiteInfoId}
     * @allow (get) Any user can read website info.
     * @allow (list) Any user can list website info.
     * @deny None.
     * @principle Allows public access to non-sensitive information.
     */
    match /website_info/{websiteInfoId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}