/**
 * @fileoverview Firestore Security Rules for DocuGuard application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for documents and analysis results.
 * Only authenticated users can access their own data.
 * Additionally, it provides role-based access control for administrators.
 * Website information is publicly accessible.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/documents/{documentId}: Stores documents uploaded by a user.
 * - /users/{userId}/documents/{documentId}/analysis_results/{analysisResultId}: Stores analysis results for documents.
 * - /admins/{adminId}: Stores administrator credentials.
 * - /website_info/{websiteInfoId}: Stores website information for the "what is this website" popup.
 *
 * Key Security Decisions:
 * - Users can only access their own data.
 * - Listing of all users is disallowed.
 * - The `admins` collection will require more complex logic to securely handle admin access, likely involving a separate authentication mechanism or custom claims.  For now, it's locked down.
 * - Website info is publicly readable.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to manage their own profile information.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     * @allow (get) User with ID 'user123' can read their profile.
     * @allow (update) User with ID 'user123' can update their profile.
     * @allow (delete) User with ID 'user123' can delete their profile.
     * @deny (create) User with ID 'user456' cannot create a profile with ID 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Allows users to manage their own documents.
     * @path /users/{userId}/documents/{documentId}
     * @allow (create) User with ID 'user123' can create a document with ID 'doc123' under their profile.
     * @allow (get) User with ID 'user123' can read a document with ID 'doc123' under their profile.
     * @allow (update) User with ID 'user123' can update a document with ID 'doc123' under their profile.
     * @allow (delete) User with ID 'user123' can delete a document with ID 'doc123' under their profile.
     * @deny (create) User with ID 'user456' cannot create a document under the profile of 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/documents/{documentId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.userId == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data != null && resource.data.userId == userId;
    }

    /**
     * @description Allows users to manage analysis results for their own documents.
     * @path /users/{userId}/documents/{documentId}/analysis_results/{analysisResultId}
     * @allow (create) User with ID 'user123' can create an analysis result for their document 'doc123'.
     * @allow (get) User with ID 'user123' can read an analysis result for their document 'doc123'.
     * @allow (update) User with ID 'user123' can update an analysis result for their document 'doc123'.
     * @allow (delete) User with ID 'user123' can delete an analysis result for their document 'doc123'.
     * @deny (create) User with ID 'user456' cannot create an analysis result under the document of 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/documents/{documentId}/analysis_results/{analysisResultId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId) && resource.data != null;
    }

    /**
     * @description Restricts access to administrator credentials.
     * @path /admins/{adminId}
     * @deny (create) No one can create admin profiles through the client.
     * @deny (get) No one can read admin profiles through the client.
     * @deny (update) No one can update admin profiles through the client.
     * @deny (delete) No one can delete admin profiles through the client.
     * @principle Restricts access to admin role.
     */
    match /admins/{adminId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public access to website information.
     * @path /website_info/{websiteInfoId}
     * @allow (get) Anyone can read website information.
     * @allow (list) Anyone can list website information.
     * @deny (create) No one can create website information.
     * @deny (update) No one can update website information.
     * @deny (delete) No one can delete website information.
     * @principle Allows public read access to website information, restricts write access.
     */
    match /website_info/{websiteInfoId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}